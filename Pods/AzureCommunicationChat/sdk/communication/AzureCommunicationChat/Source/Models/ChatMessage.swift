// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

public struct ChatMessage: Codable {
    // MARK: Properties

    /// The id of the chat message. This id is server generated.
    public let id: String?
    /// Type of the chat message.
    ///
    /// Possible values:
    ///     - Text
    ///     - ThreadActivity/TopicUpdate
    ///     - ThreadActivity/AddMember
    ///     - ThreadActivity/DeleteMember
    public let type: String?
    /// The chat message priority.
    public let priority: ChatMessagePriority?
    /// Version of the chat message.
    public let version: String?
    /// Content of the chat message.
    public let content: String?
    /// The display name of the chat message sender. This property is used to populate sender name for push notifications.
    public let senderDisplayName: String?
    /// The timestamp when the chat message arrived at the server. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
    public let createdOn: Date?
    /// The id of the chat message sender.
    public let senderId: String?
    /// The timestamp when the chat message was deleted. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
    public let deletedOn: Date?
    /// The timestamp when the chat message was edited. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
    public let editedOn: Date?

    // MARK: Initializers

    /// Initialize a `ChatMessage` structure.
    /// - Parameters:
    ///   - id: The id of the chat message. This id is server generated.
    ///   - type: Type of the chat message.
    ///
    /// Possible values:
    ///     - Text
    ///     - ThreadActivity/TopicUpdate
    ///     - ThreadActivity/AddMember
    ///     - ThreadActivity/DeleteMember
    ///   - priority: The chat message priority.
    ///   - version: Version of the chat message.
    ///   - content: Content of the chat message.
    ///   - senderDisplayName: The display name of the chat message sender. This property is used to populate sender name for push notifications.
    ///   - createdOn: The timestamp when the chat message arrived at the server. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
    ///   - senderId: The id of the chat message sender.
    ///   - deletedOn: The timestamp when the chat message was deleted. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
    ///   - editedOn: The timestamp when the chat message was edited. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
    public init(
        id: String? = nil, type: String? = nil, priority: ChatMessagePriority? = nil, version: String? = nil,
        content: String? = nil, senderDisplayName: String? = nil, createdOn: Date? = nil, senderId: String? = nil,
        deletedOn: Date? = nil, editedOn: Date? = nil
    ) {
        self.id = id
        self.type = type
        self.priority = priority
        self.version = version
        self.content = content
        self.senderDisplayName = senderDisplayName
        self.createdOn = createdOn
        self.senderId = senderId
        self.deletedOn = deletedOn
        self.editedOn = editedOn
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case id
        case type
        case priority
        case version
        case content
        case senderDisplayName
        case createdOn
        case senderId
        case deletedOn
        case editedOn
    }

    /// Initialize a `ChatMessage` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.id = try? container.decode(String.self, forKey: .id)
        self.type = try? container.decode(String.self, forKey: .type)
        self.priority = try? container.decode(ChatMessagePriority.self, forKey: .priority)
        self.version = try? container.decode(String.self, forKey: .version)
        self.content = try? container.decode(String.self, forKey: .content)
        self.senderDisplayName = try? container.decode(String.self, forKey: .senderDisplayName)
        if let dateString = try? container.decode(String.self, forKey: .createdOn) {
            self.createdOn = Date(dateString, format: Date.Format.iso8601)
        } else {
            self.createdOn = nil
        }
        self.senderId = try? container.decode(String.self, forKey: .senderId)
        if let dateString = try? container.decode(String.self, forKey: .deletedOn) {
            self.deletedOn = Date(dateString, format: Date.Format.iso8601)
        } else {
            self.deletedOn = nil
        }
        if let dateString = try? container.decode(String.self, forKey: .editedOn) {
            self.editedOn = Date(dateString, format: Date.Format.iso8601)
        } else {
            self.editedOn = nil
        }
    }

    /// Encode a `ChatMessage` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if id != nil { try? container.encode(id, forKey: .id) }
        if type != nil { try? container.encode(type, forKey: .type) }
        if priority != nil { try? container.encode(priority, forKey: .priority) }
        if version != nil { try? container.encode(version, forKey: .version) }
        if content != nil { try? container.encode(content, forKey: .content) }
        if senderDisplayName != nil { try? container.encode(senderDisplayName, forKey: .senderDisplayName) }
        if createdOn != nil {
            let dateFormatter = DateFormatter()
            let dateString = dateFormatter.string(from: createdOn!)
            try? container.encode(dateString, forKey: .createdOn)
        }

        if senderId != nil { try? container.encode(senderId, forKey: .senderId) }
        if deletedOn != nil {
            let dateFormatter = DateFormatter()
            let dateString = dateFormatter.string(from: deletedOn!)
            try? container.encode(dateString, forKey: .deletedOn)
        }

        if editedOn != nil {
            let dateFormatter = DateFormatter()
            let dateString = dateFormatter.string(from: editedOn!)
            try? container.encode(dateString, forKey: .editedOn)
        }
    }
}
